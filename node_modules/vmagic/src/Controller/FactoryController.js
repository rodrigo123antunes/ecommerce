/*eslint no-underscore-dangle: ["error", { "allow": ["_initDatasource"] }]*/
'use strict';

const Couchbase = require("../Component/DataSource/Couchbase.js");
const Logger = require("../Component/Logger.js");
const Request = require("../Component/Request.js");
const Email = require("../Component/Email.js");
const AppDatasource = require('../Component/DataSource/AppDatasource');

class FactoryController {

    constructor(application, mode) {
        this.application = application;
        this.core = require(`${this.application.configPath}/core.json`); //eslint-disable-line global-require
        this.appDatasource = new AppDatasource(this.core.dataSources, mode); //Param mode Identify when is running mode test or production.
        this.logger = new Logger();
        this.request = new Request();
        this.email = new Email(this.core.email);
    }

    /**
     * It's returns a new component instance
     * @param {string} name Component's name.
     * @param {Object} app Application.
     * @returns {Object} Object component.
     */
    component(name, app) {
        if (name === 'Couchbase') {
            return new Couchbase();
        } else if (name === 'MySQL') {
            return this.appDatasource.getDatasource();
        } else if (name === 'PgSQL') {
            return this.appDatasource.getDatasource();
        } else if (name === 'Logger') {
            return this.logger;
        } else if (name === 'Request') {
            return this.request;
        } else if (name === 'Email') {
            return this.email;
        }

        var OtherComponent = require(`${app.componentPath}/${name}.js`); //eslint-disable-line global-require

        return new OtherComponent();
    }

    /**
     * It's returns a config file.
     * @param {string} name Configuration's name.
     * @param {Object} app Application.
     * @returns {Object} Object configuration.
     */
    config(name, app) {
        this.mConfig = require(`${app.configPath}/${name}`); //eslint-disable-line global-require

        return this.mConfig;
    }

    /**
     * It's returns a new controller instance.
     * @param {string} name Controller's name.
     * @returns {Object} Object Controller.
     */
    controller(name) {
        const that = this;
        const Controller = require(`${this.application.controllersPath}/${name}Controller.js`); //eslint-disable-line global-require
        const mController = new Controller();

        mController.component = function (componentName) {
            return that.component(componentName, that.application);
        };

        mController.config = function (configName) {
            return that.config(configName, that.application);
        };

        mController.model = function (modelName) {
            if (Array.isArray(modelName)) {
                for (let index = 0; index < modelName.length; index += 1) {
                    const strModelName = modelName[index];
                    mController[strModelName] = that.model(strModelName);
                }
            } else {
                mController[modelName] = that.model(modelName);
            }
        };

        mController.setHeader = function (header) {
            mController.responseHeader = header;
        };

        if (typeof mController.init !== "undefined") {
            mController.init();
        }

        return mController;
    }

    /**
     * It's returns a new model instance.
     * @param {string} name Model's name.
     * @returns {Object} Object model.
     */
    model(name) {
        const that = this;
        const Model = require(`${this.application.modelPath}/${name}.js`); //eslint-disable-line global-require
        const mModel = new Model(this.appDatasource);

        mModel.component = function (componentName) {
            return that.component(componentName, that.application);
        };

        mModel.config = function (configName) {
            return that.config(configName, that.application);
        };

        if (typeof mModel.init !== "undefined") {
            mModel.init();
        }

        return mModel;
    }
}

module.exports = FactoryController;
