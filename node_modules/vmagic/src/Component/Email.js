/*eslint max-statements: ["error", 30]*/
'use strict';

var mailer = require("nodemailer");

class Email {

    constructor(config) {
        this.mConfig = config;
    }

    send(data, callback) {
        this.data = data;
        let options = {};

        //Validation Fields
        if (!this.mConfig.username) {
            callback({ 'error': 'username cannot be null.' }, null);

            return;
        }
        if (!this.mConfig.password) {
            callback({ 'error': 'password cannot be null.' }, null);

            return;
        }
        if (!this.data.to) {
            callback({ 'error': 'to cannot be null.' }, null);

            return;
        }
        if (!this.data.subject) {
            callback({ 'error': 'subject cannot be null.' }, null);

            return;
        }

        if (this.mConfig.host) {
            options.host = this.mConfig.host;
        }
        if (this.mConfig.port) {
            options.port = this.mConfig.port;
        }
        if (this.mConfig.secure) {
            options.secure = this.mConfig.secure; // true for 465, false for other ports
        }
        if (this.mConfig.tls) {
            options.tls = this.mConfig.tls;
        }
        options.auth = {
            "user": this.mConfig.username,
            "pass": this.mConfig.password
        };

        const smtpTransport = mailer.createTransport(options);
        const mail = {
            "from": this.mConfig.from,
            "to": this.data.to,
            "subject": this.data.subject,
            "text": this.data.text,
            "html": this.data.html
        };

        //If exists files attachments
        if (this.data.attachments) {
            //Params, filename, path
            mail.attachments = this.data.attachments;
        }

        smtpTransport.sendMail(mail, (err, res) => {
            if (err) {
                callback(err, null);
            } else {
                callback(null, res);
            }
            smtpTransport.close();
        });
    }
    /**
     * [send description]
     * @param  {[type]}   data     [description]
     * @param  {Function} callback [description]
     * @return {[type]}            [description]
     */
    send(data) {
        this.data = data;
        let options = {};

        return new Promise((resolve, reject) => {
            //Validation Fields
            if (!this.mConfig.username) {
                reject(new Error("username cannot be null."));

                return;
            } else if (!this.mConfig.password) {
                reject(new Error("password cannot be null."));

                return;
            } else if (!this.data.to) {
                reject(new Error("to cannot be null."));

                return;
            } else if (!this.data.subject) {
                reject(new Error("subject cannot be null."));

                return;
            }

            if (this.mConfig.host) {
                options.host = this.mConfig.host;
            }
            if (this.mConfig.port) {
                options.port = this.mConfig.port;
            }
            if (this.mConfig.secure) {
                options.secure = this.mConfig.secure; // true for 465, false for other ports
            }
            if (this.mConfig.tls) {
                options.tls = this.mConfig.tls;
            }
            options.auth = {
                "user": this.mConfig.username,
                "pass": this.mConfig.password
            };

            const smtpTransport = mailer.createTransport(options);
            const mail = {
                "from": this.mConfig.from,
                "to": this.data.to,
                "subject": this.data.subject,
                "text": this.data.text,
                "html": this.data.html
            };
            
            //If exists files attachments
            if (this.data.attachments) {
                //Params, filename, path
                mail.attachments = this.data.attachments;
            }

            smtpTransport.sendMail(mail, (err, res) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(res);
                }
                smtpTransport.close();
            });
        })
    }
}

module.exports = Email;
