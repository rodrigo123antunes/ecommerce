/*eslint max-statements: ["error", 100], max-depth: ["error", 10], class-methods-use-this: ["error", { "exceptMethods": ["_getWhereSQL","_getSelectSQL"] }] */
'use strict';

var Promise = require("bluebird");
var mysql = require('mysql');
var Logger = require('../Logger.js');
var pool = null;

class MySQL {

    constructor(dbConfig) {
        this.dbConfig = dbConfig;
        this.logger = new Logger();
    }

    createPool() {
        let connectionLimit = 10;
        if (this.dbConfig.connectionLimit) {
            connectionLimit = this.dbConfig.connectionLimit;
        }

        pool = mysql.createPool({
            "connectionLimit" : connectionLimit,
            "host" : this.dbConfig.host,
            "port" : this.dbConfig.port,
            "user" : this.dbConfig.user,
            "password" : this.dbConfig.password,
            "database" : this.dbConfig.database,
            "timezone" : 'Z'
        });
        this.logger.success("Pool connection created successfully.");
    }

    connect() {
        return new Promise((resolve, reject) => {
            pool.getConnection((err, connection) => {
                if (err) {
                    this.logger.error('[Magic] MySQL Connection was not established.');
                    reject(err);
                } else {
                    this.logger.success('[Magic] MySQL Connection established successfully.');
                    resolve(connection);
                }
            });
        });
    }

    close(connection) {
        this.logger.success('[Magic] MySQL is closed successfully.');
        connection.release();
    }

    closeAll() {
        const that = this;

        return new Promise((resolve, reject) => {
            pool.end(function (err) {
                if (err) {
                    that.logger.error(err);
                    reject(err);
                } else {
                    that.logger.success('[Magic] MySQL Connection closed successfully.');
                    resolve({'message' : 'MySQL Connection closed successfully.'});
                }
            });
        });
    }

    destroy(connection) {
        this.logger.success('[Magic] MySQL Connection destroyed successfully.');
        connection.destroy();
    }

    _getWhereSQL(table, params) {
        let where = '';
        const arrayValues = [];

        /*
         * It's creates the conditions for where.
         */
        if (Reflect.has(params, 'conditions')) {
            var index = 0;
            if (!Array.isArray(params.conditions) && typeof params.conditions == "object") {
                for (var key in params.conditions) {
                    if (Reflect.has(params.conditions, key)) {
                        index += 1;

                        let column = "";
                        if (key.indexOf(".") > -1) {
                            column = key;
                        } else {
                            column = `${table}.${key}`;
                        }

                        if (index == 1) {
                            where += `WHERE ${column} = ?`;
                        } else {
                            where += ` AND ${column} = ?`;
                        }

                        arrayValues.push(params.conditions[key]);
                    }
                }
            } else if (Array.isArray(params.conditions)) {
                for (index = 0; index < params.conditions.length; index += 1) {
                    var obj = params.conditions[index];
                    var arrayKeys = Reflect.ownKeys(obj);
                    var conditions = null;
                    var operationValue = '=';
                    var values = obj[arrayKeys[0]];

                    if (arrayKeys[0].indexOf(".") > -1) {
                        conditions = arrayKeys[0];
                    } else {
                        conditions = `${table}.${arrayKeys[0]}`;
                    }

                    if (arrayKeys[1]) {
                        operationValue = obj[arrayKeys[1]];

                        if (operationValue.trim() === "") {
                            operationValue = "";
                        } else if (operationValue.toUpperCase() === 'BETWEEN') {
                            operationValue += " ? AND ?";
                        } else if (operationValue.toUpperCase() === 'IN') {
                            operationValue += " (";
                            for (var index2 = 0; index2 < values.length; index2 += 1) {
                                if (index2 === values.length - 1) {
                                    operationValue += "?";
                                } else {
                                    operationValue += "?, ";
                                }
                            }
                            operationValue += ")";
                        } else if (operationValue.toUpperCase() !== 'IS NULL' && operationValue.toUpperCase() !== 'IS NOT NULL') {
                            operationValue += " ?";
                        }
                    } else {
                        operationValue += " ?";
                    }

                    if (index == 0) {
                        where += `WHERE ${conditions} ${operationValue}`;
                    } else {
                        where += ` AND ${conditions} ${operationValue}`;
                    }

                    //Iterate array values.
                    if (Array.isArray(values)) {
                        for (var indexValue = 0; indexValue < values.length; indexValue += 1) {
                            arrayValues.push(values[indexValue]);
                        }
                    } else {
                        arrayValues.push(values);
                    }
                }
            }
        }

        return {"where" : where, "values" : arrayValues};
    }

    _getSelectSQL(table, params) {
        let strQuery = "";
        let columns = "*";
        let group = "";
        let order = "";
        let limit = "";
        let join = "";

        if (!params) {
            return {"sql" : `SELECT * FROM ${table}`, "values" : []};
        }

        const conditions = this._getWhereSQL(table, params);

        if (Reflect.has(params, 'fields') && params.fields.length > 0) {
            const arrayColumns = [];
            for (let ind = 0; ind < params.fields.length; ind += 1) {
                if (params.fields[ind].indexOf(".") > -1) {
                    arrayColumns.push(params.fields[ind]);
                } else {
                    arrayColumns.push(`${table}.${params.fields[ind]}`);
                }
            }
            columns = arrayColumns.join();
        }

        if (Reflect.has(params, 'order') && params.order.length > 0) {
            const arrayOrder = [];
            for (let ind = 0; ind < params.order.length; ind += 1) {
                if (params.order[ind].indexOf(".") > -1) {
                    arrayOrder.push(params.order[ind]);
                } else {
                    arrayOrder.push(`${table}.${params.order[ind]}`);
                }
            }
            order = arrayOrder.join();
        }

        if (Reflect.has(params, 'group') && params.group.length > 0) {
            const arrayGroups = [];
            for (let ind = 0; ind < params.group.length; ind += 1) {
                if (params.group[ind].indexOf(".") > -1) {
                    arrayGroups.push(params.group[ind]);
                } else {
                    arrayGroups.push(`${table}.${params.group[ind]}`);
                }
            }
            group = arrayGroups.join();
        }

        if (Reflect.has(params, 'limit')) {
            limit = params.limit;
        }

        if (Reflect.has(params, 'join')) {
            if (!Array.isArray(params.join) && typeof params.join == "object") {
                const joinProperties = Reflect.ownKeys(params.join);
                const joinType = joinProperties[0];
                const joinCondition = params.join[joinType];
                join += `${joinType} JOIN ${joinCondition.table} ON ${joinCondition.on} `;
            } else if (Array.isArray(params.join)) {
                for (const ind in params.join) {
                    if (Reflect.has(params.join, ind)) {
                        const joinItem = params.join[ind];
                        const keyJoin = Object.keys(joinItem);
                        join += `${keyJoin} JOIN ${joinItem[keyJoin].table} ON ${joinItem[keyJoin].on} `;
                    }
                }
            }
        }

        strQuery = `SELECT ${columns} FROM ${table}`;
        if (join !== "") {
            strQuery += ` ${join}`;
        }
        if (conditions.where !== "") {
            strQuery += ` ${conditions.where}`;
        }
        if (group !== "") {
            strQuery += ` GROUP BY ${group}`;
        }
        if (order !== "") {
            strQuery += ` ORDER BY ${order}`;
        }
        if (limit !== "") {
            strQuery += ` LIMIT ${limit}`;
        }

        return {"sql" : strQuery, "values" : conditions.values};
    }

    delete(table, conditions, connection = null) {
        const objWhere = this._getWhereSQL(table, {"conditions" : conditions});
        if (this._showSQL) {
            this.logger.info(`[Magic] DELETE FROM ${table} ${objWhere.where}`);
        }

        return new Promise((resolve, reject) => {
            if (connection) {
                const sql = `DELETE FROM ${table} ${objWhere.where}`;
                connection.query(sql, objWhere.values, (error, result) => {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(result);
                    }
                });
            } else {
                this.connect().then(newConnection => {
                    const sql = `DELETE FROM ${table} ${objWhere.where}`;
                    newConnection.query(sql, objWhere.values, (error, result) => {
                        this.close(newConnection);
                        if (error) {
                            reject(error);
                        } else {
                            resolve(result);
                        }
                    });
                }).catch(error => {
                    reject(error);
                });
            }
        });
    }

    save(table, data, connection = null) {
        var insertInto = `INSERT INTO ${table} (`;
        var index = 0;
        var fields = '';
        var values = "VALUES (";
        var totalKeys = Object.keys(data).length;
        var arrayValues = [];
        for (var key in data) {
            if (Reflect.has(data, key)) {
                index += 1;
                if (index < totalKeys) {
                    fields += `${table}.${key},`;
                    values += "?,";
                } else {
                    fields += `${table}.${key}) `;
                    values += "?);";
                }
                arrayValues.push(data[key]);
            }
        }
        insertInto += fields + values;
        if (this._showSQL) {
            this.logger.info(`[Magic] ${insertInto}`);
        }

        return new Promise((resolve, reject) => {
            if (connection) {
                connection.query(insertInto, arrayValues, (error, result) => {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(result);
                    }
                });
            } else {
                this.connect().then(newConnection => {
                    newConnection.query(insertInto, arrayValues, (error, result) => {
                        this.close(newConnection);
                        if (error) {
                            reject(error);
                        } else {
                            resolve(result);
                        }
                    });
                }).catch(error => {
                    reject(error);
                });
            }
        });
    }

    async saveMany(table, data, connection = null) {
        const that = this;
        let conn = null;

        if (connection) {
            conn = connection;
        } else {
            conn = await this.connect();
            if (connection === null) {
                await conn.beginTransaction();
            }
        }

        const arrayPromises = [];
        for (var index = 0; index < data.length; index += 1) {
            arrayPromises.push(that.save(table, data[index], conn));
        }

        try {
            const arrayResponse = await Promise.all(arrayPromises);
            if (connection === null) {
                return new Promise(resolve => {
                    conn.commit(function () {
                        resolve(arrayResponse);
                    });
                });
            }

            return Promise.resolve(arrayResponse);
        } catch (err) {
            if (connection === null) {
                return new Promise((resolve, reject) => {
                    conn.rollback(function () {
                        reject(new Error(err.message));
                    });
                });
            }

            return Promise.reject(new Error(err.message));
        } finally {
            if (connection === null) {
                that.close(conn);
            }
        }
    }

    update(table, data, conditions, connection = null) {
        let update = `UPDATE ${table} SET `;
        const arrayValues = [];
        var index = 0;

        const totalKeys = Object.keys(data).length;
        for (var key in data) {
            if (Reflect.has(data, key)) {
                index += 1;
                arrayValues.push(data[key]);
                if (index < totalKeys) {
                    update += `${table}.${key} = ?, `;
                } else {
                    update += `${table}.${key} = ?`;
                }
            }
        }

        const objWhere = this._getWhereSQL(table, {"conditions" : conditions});
        const values = arrayValues.concat(objWhere.values);
        if (this._showSQL) {
            this.logger.info(`[Magic] ${update} ${objWhere.where}`);
        }

        return new Promise((resolve, reject) => {
            if (connection) {
                connection.query(`${update} ${objWhere.where}`, values, (error, result) => {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(result);
                    }
                });
            } else {
                this.connect().then(newConnection => {
                    newConnection.query(`${update} ${objWhere.where}`, values, (error, result) => {
                        this.close(newConnection);
                        if (error) {
                            reject(error);
                        } else {
                            resolve(result);
                        }
                    });
                }).catch(error => {
                    reject(error);
                });
            }
        });
    }

    findBy(table, data, _params, connection = null) {
        let params = {};
        if (_params) {
            params = _params;
        }
        params.conditions = data;
        const objParams = this._getSelectSQL(table, params);
        if (this._showSQL) {
            this.logger.info(`[Magic] ${objParams.sql}`);
        }

        return new Promise((resolve, reject) => {
            if (connection) {
                connection.query(objParams.sql, objParams.values, (error, result) => {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(result);
                    }
                });
            } else {
                this.connect().then(newConnection => {
                    newConnection.query(objParams.sql, objParams.values, (error, result) => {
                        this.close(newConnection);
                        if (error) {
                            reject(error);
                        } else {
                            resolve(result);
                        }
                    });
                }).catch(error => {
                    reject(error);
                });
            }
        });
    }

    findAll(table, params, connection = null) {
        const objParams = this._getSelectSQL(table, params);
        if (this._showSQL) {
            this.logger.info(`[Magic] ${objParams.sql}`);
        }

        return new Promise((resolve, reject) => {
            if (connection) {
                connection.query(objParams.sql, objParams.values, (error, result) => {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(result);
                    }
                });
            } else {
                this.connect().then(newConnection => {
                    newConnection.query(objParams.sql, objParams.values, (error, result) => {
                        this.close(newConnection);
                        if (error) {
                            reject(error);
                        } else {
                            resolve(result);
                        }
                    });
                }).catch(error => {
                    reject(error);
                });
            }
        });
    }

    showSQL() {
        this._showSQL = true;
    }
}

module.exports = MySQL;
