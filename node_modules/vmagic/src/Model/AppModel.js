/*eslint max-depth: ["error", 5] max-statements: ["error", 20]*/
'use strict';

const Promise = require("bluebird");

class AppModel {

    constructor(appDatasource) {
        this.appDatasource = appDatasource;
    }

    validate(arrayRules) {
        this._arrayRules = arrayRules;
    }

    join(data) {
        this._join = data;
    }

    /**
     * This method is called before save.
     * @param {Object} data Object to save.
     * @returns {Void} It's not returns nothing.
     */
    _checkRules(data) {
        var arrayPromises = [];
        if (typeof this._arrayRules !== "undefined" && this._arrayRules.length > 0) {
            var verify = index => {

                /**
                 * This method check if the keys are compatible with the rules key.
                 * @param {Object} objectToValidate It is an object used to compare with the rules.
                 * @param {Object} rules It is an object rules.
                 * @returns {Void} It's not returns nothing.
                 */
                function exec(objectToValidate, rules) {
                    var promise = new Promise((resolve, reject) => {
                        var hasProperty = false;
                        for (var key in objectToValidate) {
                            if (Reflect.has(rules[index], key)) {
                                hasProperty = true;
                                //Object with rules.
                                var objRule = rules[index][key];
                                //Field value.
                                var value = objectToValidate[key];
                                if (objRule.rule == "notEmpty") {
                                    if (value && value != "") {
                                        resolve();
                                    } else {
                                        reject(new Error(objRule.message));
                                    }
                                } else if (objRule.rule == "maxLength") {
                                    if (Reflect.has(objRule, "value")) {
                                        if (value.length >= objRule.value) {
                                            resolve();
                                        } else {
                                            reject(new Error(objRule.message));
                                        }
                                    } else {
                                        reject(new Error("Rule maxLength must have a property value."));
                                    }
                                }
                            }
                        }
                        if (!hasProperty) {
                            reject(new Error(`Field ${Object.keys(rules[index])[0]} not found.`));
                        }
                    });
                    arrayPromises.push(promise);
                }

                if (Array.isArray(data)) {
                    for (var index2 = 0; index2 < data.length; index2 += 1) {
                        exec(data[index2], this._arrayRules);
                    }
                } else {
                    exec(data, this._arrayRules);
                }
            };

            /*
             * For each rule is called the verify function to identify if there is some wrong.
             */
            for (var index = 0; index < this._arrayRules.length; index += 1) {
                verify(index);
            }
        }

        return Promise.all(arrayPromises);
    }

    delete(conditions, connection = null) {
        return this.appDatasource.delete(this.useTable, conditions, connection);
    }

    save(data, connection = null) {
        return this._checkRules(data).
            then(() => this.appDatasource.save(this.useTable, data, connection));
    }

    saveMany(data, connection = null) {
        return this._checkRules(data).
            then(() => this.appDatasource.saveMany(this.useTable, data, connection));
    }

    update(data, conditions, connection = null) {
        return this._checkRules(data).
            then(() => this.appDatasource.update(this.useTable, data, conditions, connection));
    }

    findBy(data, params, connection = null) {
        return this.appDatasource.findBy(this.useTable, data, this.getParams(params), connection);
    }

    findAll(params, connection = null) {
        return this.appDatasource.findAll(this.useTable, this.getParams(params), connection);
    }

    find(type, params, connection = null) {
        return this.appDatasource.find(this.useTable, type, this.getParams(params), connection);
    }

    getParams(data) {
        let params = data;

        if (this._join) {
            if (params) {
                params.join = this._join;
            } else {
                params = {
                    "join" : this._join
                };
            }
        }

        return params;
    }

    showSQL() {
        this.appDatasource.showSQL();
    }
}

module.exports = AppModel;
