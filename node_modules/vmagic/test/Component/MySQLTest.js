/*eslint no-underscore-dangle: ["error", { "allow": ["_getWhereSQL", "_getSelectSQL"] }]*/
'use strict';

const DataSource = require("../../src/Component/DataSource/MySQL");
const {expect} = require('chai');
let mysql = null;

before(function() {
    const config = {
        "dataSource" : "MySQL",
        "host" : "127.0.0.1",
        "port" : 3306,
        "user" : "root",
        "password" : "<password>",
        "database" : "db"
    };

    mysql = new DataSource(config);
});

describe('Testing the datasource mysql.', function () {
    it('Should validate conditions array', function (done) {
        const params = {
            "conditions" : [
                {
                    "name" : "Diego", "operation" : "<>"
                },
                {
                    "perfil" : "ADMINISTRATOR"
                }
            ]
        };

        const res = mysql._getWhereSQL("user", params);
        expect('WHERE user.name <> ? AND user.perfil = ?').to.equal(res.where);
        expect('Diego').to.equal(res.values[0]);
        done();
    });

    it('Should validate conditions object', function (done) {
        const params = {
            "conditions" : {
                "name" : "Diego", "age" : "10"
            }
        };

        const res = mysql._getWhereSQL("user", params);
        expect('WHERE user.name = ? AND user.age = ?').to.equal(res.where);
        expect('Diego').to.equal(res.values[0]);
        expect('10').to.equal(res.values[1]);
        done();
    });

    it('Should validate the _getSelectSQL function', function (done) {
        const params = {
            "conditions" : [
                {
                    "name" : "Diego", "operation" : "<>"
                }
            ]
        };
        const res = mysql._getSelectSQL("user", params);
        expect('SELECT * FROM user WHERE user.name <> ?').to.equal(res.sql);
        done();
    });

    it('Should validate fields in the _getSelectSQL function', function (done) {
        const params = {
            "fields" : [
                "name",
                "age"
            ],
            "conditions" : [
                {
                    "name" : "Diego", "operation" : "<>"
                }
            ]
        };
        const res = mysql._getSelectSQL("user", params);
        expect('SELECT user.name,user.age FROM user WHERE user.name <> ?').to.equal(res.sql);
        done();
    });

    it('Should validate the between condition.', function (done) {
        const params = {
            "fields" : [
                "name",
                "age"
            ],
            "conditions" : [
                {
                    "created_at" : [
                        "2019-01-01",
                        "2019-12-01"
                    ],
                    "operation" : "BETWEEN"
                }
            ]
        };
        const res = mysql._getSelectSQL("user", params);
        expect('SELECT user.name,user.age FROM user WHERE user.created_at BETWEEN ? AND ?').to.equal(res.sql);
        expect('2019-01-01').to.equal(res.values[0]);
        expect('2019-12-01').to.equal(res.values[1]);
        done();
    });

    it('Should validate the IS NOT NULL condition.', function (done) {
        const params = {
            "fields" : [
                "name",
                "age"
            ],
            "conditions" : [
                {
                    "name" : "",
                    "operation" : "IS NOT NULL"
                }
            ]
        };
        const res = mysql._getSelectSQL("user", params);
        expect('SELECT user.name,user.age FROM user WHERE user.name IS NOT NULL').to.equal(res.sql);
        done();
    });

    it('Should validate the IS NULL condition.', function (done) {
        const params = {
            "fields" : [
                "name",
                "age"
            ],
            "conditions" : [
                {
                    "name" : "",
                    "operation" : "IS NULL"
                }
            ]
        };
        const res = mysql._getSelectSQL("user", params);
        expect('SELECT user.name,user.age FROM user WHERE user.name IS NULL').to.equal(res.sql);
        done();
    });

    it('Should validate the IN condition.', function (done) {
        const params = {
            "conditions" : [
                {
                    "id" : [
                        1,
                        5,
                        10
                    ],
                    "operation" : "IN"
                }
            ]
        };
        const res = mysql._getSelectSQL("user", params);
        expect('SELECT * FROM user WHERE user.id IN (?, ?, ?)').to.equal(res.sql);
        done();
    });
});
